#!/usr/bin/env php
<?php
/* Copyright 2018 Romain "Artefact2" Dal Maso <artefact2@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ini_set('memory_limit', -1);

const STARTPOS = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w';

require __DIR__.'/../../tools/ormulogun.php';

if($argc !== 3 && $argc !== 4) {
	fprintf(STDERR, "Usage: %s book.tsv eco.tsv [freq-node-cutoff]\n", $argv[0]);
	die(1);
}

$freqcutoff = floatval($argv[3] ?? 0);



$book = [];
$bf = fopen($argv[1], 'rb');
assert($bf !== false);
while($l = fgets($bf)) {
	list($w, $d, $l, $fen, $lan) = explode("\t", substr($l, 0, -1));
	if($lan === '') {
		$book[$fen] = [ (int)$w, (int)$d, (int)$l, [] ];
	} else {
		$book[$fen][3][$lan] = [ (int)$w, (int)$d, (int)$l ];
	}
}
fclose($bf);
fprintf(STDERR, "Loaded %d positions from book.\n", count($book));

$eco = [ STARTPOS => [ '000', 'Start position', '' ] ];
$bf = fopen($argv[2], 'rb');
assert($bf !== false);
while($l = fgets($bf)) {
	list($code, $opening, $variation, $fen) = explode("\t", substr($l, 0, -1));
	$eco[$fen] = [ $code, $opening, $variation ];
}
fclose($bf);
fprintf(STDERR, "Loaded %d positions from ECO code book.\n", count($eco));



$nodes = [];
$edges = [];
$traversed = [];
traverse('', 0, 0, orm_gumble('fen'), $nodes, $edges, $traversed, $book, $eco);


$tt = [];
foreach($book as $f => list($w, $d, $l)) {
	@$tt[orm_ecobookfen($f)] += $w + $d + $l;
}

/* Perform the pruning; prune based on frequency and also remove
 * sources that aren't the start position */
do {
	$removed = 0;

	foreach($nodes as $k => $i) {
		if($tt[$k] / $tt[STARTPOS] < $freqcutoff) {
			unset($nodes[$k], $edges[$k]);
			++$removed;
			continue;
		}

		if($i === 0) continue; /* Start position */

		/* Do we have any parents? */
		foreach($edges as $src => $a) {
			foreach($a as $dest => $v) {
				/* Being your own parent doesn't count */
				if($src === $dest) continue;

				/* Yes! */
				if($dest === $k) continue 3;
			}
		}

		/* No. */
		unset($nodes[$k], $edges[$k]);
		++$removed;
	}

} while($removed > 0);



echo "digraph \"\" {\n",
	"graph [outputorder=edgesfirst ranksep=3]\n",
	"node [style=filled width=0 height=0 margin=\"0,.05\"]\n";
uksort($nodes, function(string $k1, string $k2) use($tt) {
	return $tt[$k1] - $tt[$k2];
});
foreach($nodes as $k => $i) {
	assert(isset($eco[$k]));
	$n = $eco[$k];

	$freq = $tt[$k] / $tt[STARTPOS];
	$label = str_replace(': ', "\n", trim(implode(' ', $n)));

	if($n[0] !== '000') {
		$hue = (ord($n[0][0]) - ord('A')) / 5.0;
		$hue += (ord($n[0][1]) - ord('0')) / 50.0;
		$hue += (ord($n[0][2]) - ord('0')) / 500.0;
		$sat = max(0.1, min(0.9, 1.2 + .15 * log($freq)));
		$val = 1.0;
		$fs = 12 + .6 * log($freq);
	} else {
		$hue = 0.0;
		$sat = 0.0;
		$val = 0.8;
		$fs = 16;
	}

	if(!isset($edges[$k])) {
		$shape = 'note';
	} else {
		$shape = 'folder';
	}

	printf(
		"%d [fontsize=%f fillcolor=\"%f %f %f\" label=\"[%.2f%%] %s\" shape=%s href=\"%s\"]\n",
		$i,
		$fs,
		$hue, $sat, $val,
		100.0 * $freq,
		$label,
		$shape,
		'https://lichess.org/analysis/'.strtr($k, ' ', '_')
	);
}
$oldedges = $edges;
$edges = [];
foreach($oldedges as $start => $e) {
	foreach($e as $end => list($w, $t)) {
		if($start === $end) continue;
		$edges[] = [ $start, $end, $w, $t ];
	}
}
usort($edges, function(array $a, array $b): int {
		return $a[2] * $b[3] - $a[3] * $b[2];
});
unset($oldedges);
foreach($edges as list($start, $end, $w, $t)) {
	if(!isset($nodes[$start]) || !isset($nodes[$end])) continue;

	$freq = $w / $t;
	assert($freq <= 1.0);
	$cd = 1.96 * sqrt($freq * (1.0 - $freq) / $t);
	$tooltip = sprintf(
		"[%.2fÂ±%.2f%%] %s -> %s",
		100.0 * $freq,
		100.0 * $cd,
		trim(implode(' ', $eco[$start])),
		trim(implode(' ', $eco[$end]))
	);

	printf(
		"%d -> %d [weight=%f tooltip=\"%s\" color=\"#000000%02x\"]\n",
		$nodes[$start],
		$nodes[$end],
		$freq < .1 ? 0 : (1000.0 * $freq),
		$tooltip,
		round(255 * max(.1, min(1, 5 * $freq)))
	);
}
echo "}\n";



function traverse(string $prevfen, int $prevtotal, float $c, string $fen, array &$nodes, array &$edges, array &$traversed, array $book, array $eco) {
	$bfen = orm_bookfen($fen);
	$efen = orm_ecobookfen($fen);

	if(!isset($book[$bfen]) || isset($traversed[$bfen])) {
		return;
	}
	$traversed[$bfen] = true;

	if(isset($eco[$efen])) {
		$prevfen = $fen;
		$prevtotal = $c = $book[$bfen][0] + $book[$bfen][1] + $book[$bfen][2];

		if(!isset($nodes[$efen])) {
			$nodes[$efen] = count($nodes);
		}
	}

	$prevefen = orm_ecobookfen($prevfen);

	orm_gumble('position fen '.$fen, false);
	foreach($book[$bfen][3] as $lan => list($w, $d, $l)) {
		orm_gumble('position fen '.$fen.' moves '.$lan, false);
		$nextfen = orm_gumble('fen');
		$nextefen = orm_ecobookfen($nextfen);
		$nextc = $c * ($w + $d + $l) / ($book[$bfen][0] + $book[$bfen][1] + $book[$bfen][2]);

		traverse($prevfen, $prevtotal, $nextc, $nextfen, $nodes, $edges, $traversed, $book, $eco);

		if(isset($nodes[$nextefen])) {
			@$edges[$prevefen][$nextefen][0] += $nextc;
			@$edges[$prevefen][$nextefen][1] += $prevtotal;
		}
	}
}
