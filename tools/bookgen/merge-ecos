#!/usr/bin/env php
<?php
/* Copyright 2018 Romain "Artefact2" Dal Maso <artefact2@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

if($argc === 1) {
	fprintf(STDERR, "Usage: %s eco1.tsv.zst eco2.tsv.zst...\n", $argv[0]);
	die(1);
}

ini_set('memory_limit', -1);
assert_options(ASSERT_BAIL, 1);

function age(string $fen): int {
	$age = explode(' ', $fen);
	return 2 * (int)$age[5] + ($age[1] === 'b' ? -1 : -2);
}

for($i = 1; $i < $argc; ++$i) {
	$f = $argv[$i];
	assert(substr($f, -8) === '.tsv.zst');
	$k = substr(pathinfo($f, PATHINFO_BASENAME), 0, -8);

	$f = popen('zstdcat '.escapeshellarg($f), 'rb');
	assert($f !== false);

	$positions = [];

	while($l = fgets($f)) {
		list($n, , , $fen) = explode("\t", substr($l, 0, -1));

		$p = implode(' ', array_slice(explode(' ', $fen), 0, 2));
		$age = age($fen);

		if(!isset($positions[$p])) {
			$positions[$p] = [ PHP_INT_MAX, 0 ];
		}

		if($age < $positions[$p][0]) $positions[$p][0] = $age;
		$positions[$p][1] += $n;
	}

	pclose($f);

	/* Sort by descending value, then descending age */
	uasort($positions, function(array $a, array $b): int {
			if($a[1] !== $b[1]) return $b[1] - $a[1];
			return $b[0] - $a[0];
	});

	foreach(array_slice($positions, 0, 1000) as $p => list($age, $count)) { /* XXX */
		printf("%s\t%s\t%d\t%d\n", $k, $p, $age, $count);
	}
}
