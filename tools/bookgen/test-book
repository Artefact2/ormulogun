#!/usr/bin/env php
<?php
/* Copyright 2018 Romain "Artefact2" Dal Maso <artefact2@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ini_set('memory_limit', -1);

require __DIR__.'/../../tools/ormulogun.php';

if($argc !== 2 && $argc !== 3) {
	fprintf(STDERR, "Usage: %s book.tsv [eco.tsv]\n", $argv[0]);
	die(1);
}



$book = [];
$bf = fopen($argv[1], 'rb');
assert($bf !== false);
while($l = fgets($bf)) {
	list($w, $d, $l, $fen, $lan) = explode("\t", substr($l, 0, -1));

	if(!isset($book[$fen])) {
		$book[$fen] = [ 0, 0, 0, [] ];
	}

	if($lan === '') {
		$book[$fen][0] = (int)$w;
		$book[$fen][1] = (int)$d;
		$book[$fen][2] = (int)$l;
	} else {
		$book[$fen][3][$lan] = [ (int)$w, (int)$d, (int)$l ];
	}
}
fclose($bf);
foreach($book as &$a) {
	assert($a[0] + $a[1] + $a[2] > 0);
	assert(count($a[3]) > 0);
	uasort($a[3], function(array $a, array $b): int {
			return $b[0] + $b[1] + $b[2] - $a[0] - $a[1] - $a[2];
	});
}
printf("Loaded %d positions from book.\n", count($book));

$eco = [];
if($argc === 3) {
	$bf = fopen($argv[2], 'rb');
	assert($bf !== false);
	while($l = fgets($bf)) {
		list($code, $opening, $variation, $fen) = explode("\t", substr($l, 0, -1));
		$eco[$fen] = [ $code, $opening, $variation ];
	}
	fclose($bf);
	printf("Loaded %d positions from ECO code book.\n", count($eco));
}


echo "Enter moves in short or long algebraic notation. Use '..' to undo the previous move. Use ^C or q to exit.\n";
$lanmoves = '';
while(true) {
	orm_gumble('position startpos moves '.$lanmoves, false);
	$bfen = orm_bookfen($fen = orm_gumble('fen'));

	echo $bfen, "\n";
	if(isset($eco[$efen = orm_ecobookfen($fen)])) {
		printf("%3s %s %s\n", $eco[$efen][0], $eco[$efen][1], $eco[$efen][2]);
	}

	$sans = [];

	foreach($book[$bfen][3] ?? [] as $lan => list($w, $d, $l)) {
		$s = $w + $d + $l;
		$san = orm_gumble('san '.$lan);
		$sans[$lan] = $san;
		printf(
			"%10s %9d %6.2f %6.2f/%6.2f/%6.2f\n",
			$san,
			$w + $d + $l,
			100. * $s / ($book[$bfen][0] + $book[$bfen][1] + $book[$bfen][2]),
			100. * $w / $s,
			100. * $d / $s,
			100. * $l / $s
		);
	}

	while(true) {
		echo '> ';
		$input = trim(fgets(STDIN));
		if(feof(STDIN) || $input === 'q') {
			die(0);
		}
		if($input === '..') {
			$lml = strlen($lanmoves);
			$trim = 1;
			while($lml > 0 && $lanmoves[$lml - 1] !== ' ') {
				++$trim;
				--$lml;
			}
			$lanmoves = substr($lanmoves, 0, -$trim);
			break;
		}
		if(isset($sans[$input])) {
			$lanmoves .= ' '.$input;
			break;
		}
		foreach($sans as $l => $s) {
			if($s === $input) {
				$lanmoves .= ' '.$l;
				break 2;
			}
		}

		if($input !== '') {
			printf("I did not understand that command: %s.\n", json_encode($input));
		}
	}
}