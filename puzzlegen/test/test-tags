#!/usr/bin/env php
<?php
/* Copyright 2018 Romain "Artefact2" Dal Maso <artefact2@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

$failures = 0;

array_shift($argv);
foreach($argv as $testjson) {
	$test = json_decode($testjson, true);
	assert(is_array($test) && count($test) === 4);
	list($fen, $lan, $flags, $tags) = $test;
	assert(is_string($fen));
	assert(is_string($lan));
	assert(is_string($flags));
	assert(is_array($tags));

	$hasdepth = false;
	foreach($tags as $t) {
		if(preg_match('%^Depth [1-9][0-9]*$%', $t)) {
			$hasdepth = true;
			break;
		}
	}

	/* XXX: this is highly non deterministic */
	$puzjson = trim(shell_exec($cmd = sprintf(
		'%s %s --start-ply 0 --max-puzzles 1 --start-fen %s %s',
		escapeshellcmd(__DIR__.'/../tools/gen-puzzles'),
		$flags,
		escapeshellarg($fen),
		escapeshellarg(json_encode([ $lan ]))
	)));

	if($puzjson === '') {
		fprintf(STDERR, "Unexpected lack of puzzle!\nTest: %s\n", $testjson);
		goto fail;
	}

	$puz = json_decode($puzjson, true);

	if($puz[0] !== $fen || $puz[1][0] !== $lan) {
		fprintf(STDERR, "Unexpected puzzle start!\nTest: %s\nPuzzle: %s\n", $testjson, $puzjson);
		goto fail;
	}

	if(!$hasdepth) {
		foreach($puz[2] as $k => $t) {
			if(preg_match('%^Depth [1-9][0-9]*$%', $t)) {
				unset($puz[2][$k]);
				break;
			}
		}
	}

	sort($tags);
	sort($puz[2]);
	if($tags !== $puz[2]) {
		fprintf(STDERR, "Mismatched tags!\nTest: %s\nPuzzle: %s\n", $testjson, $puzjson);
		goto fail;
	}

	printf("Test OK: %s => %s\n", $testjson, $puzjson);
	continue;

	fail:
	++$failures;
	printf("Test failed: %s\n", $testjson);
}

die($failures);
